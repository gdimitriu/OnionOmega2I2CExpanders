/*PCF8574 extender operations driver.Copyright (C) 2019 Gabriel DimitriuAll rights reserved.This library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/#include<PCF8574.h>#include<onion-i2c.h>#include<stdlib.h>PCF8574::PCF8574(unsigned char t_i2cDev, unsigned char t_address){	m_i2cDevice = t_i2cDev;	m_i2cAddress = t_address;	memset(m_pinDirection, 0, 8);	m_expanderState = 0;}void PCF8574::setPin(unsigned char t_pin, bool t_direction){	if (t_pin > 7) return;	m_pinDirection[t_pin] = t_direction;}uint8_t PCF8574::readAll(){	i2c_readRaw(m_i2cDevice, m_i2cAddress, &m_expanderState, 1);	return m_expanderState;}unsigned char PCF8574::readPin(unsigned char t_pin){	if (t_pin > 7 || m_pinDirection[t_pin]) {		return 0;	}	i2c_readRaw(m_i2cDevice, m_i2cAddress, &m_expanderState, 1);	return getBit(m_expanderState, t_pin);}void PCF8574::writePin(unsigned char t_pin, unsigned char t_value){	setValuePin(t_pin, t_value);	i2c_writeBufferRaw(m_i2cDevice, m_i2cAddress, &m_expanderState, 1);}void PCF8574::setValuePin(unsigned char t_pin, unsigned char t_value){	if (t_pin > 7 || m_pinDirection[t_pin] == false || t_value > 1 || t_value < 0) {		return;	}	if (getBit(m_expanderState, t_pin) == t_value) {		return;	}	setBit(&m_expanderState, t_pin, t_value);}void PCF8574::writePins(unsigned char *t_pins, unsigned char *t_values, unsigned char t_size){	for (int i = 0; i < t_size; i++) {		setValuePin(t_pins[i], t_values[i]);	}	i2c_writeBufferRaw(m_i2cDevice, m_i2cAddress, &m_expanderState, 1);}void PCF8574::resetValues(){	m_expanderState = 0;	i2c_writeBufferRaw(m_i2cDevice, m_i2cAddress, &m_expanderState, 1);}